/**
 * Generated by orval v6.12.0 üç∫
 * Do not edit manually.
 * UiTPAS API
 * With UiTPAS API 4.0 you can retrieve ticket prices and register ticket sales for passholders. You can also save UiTPAS points and exchange them for rewards for a passholder, and much more.
 * OpenAPI spec version: 4.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  Error,
  UnauthorizedResponse,
  ForbiddenResponse,
  EventCardSystem,
} from ".././model";

/**
 * Update the `EventCardSystem` objects of the given event.

The `EventCardSystem` object specifies that the event is available in
this specific card system and optionally what manual distribution keys are enabled.

This update is used to toggle the `enabled` state for specific card systems or distribution keys.

To update the `enabled` state, you MUST retrieve the possible `EventCardSystem` objects first using  `GET /events/{eventId}/card-systems`. 
Note that you can reuse the response from the `GET` request, 
altering the `enabled` state, or you can also omit the name properties. 
Only the required fields are used in this update request.

<!-- theme: warning -->

> **This endpoint is only needed for exceptional cases.** In most cases card systems and distribution keys are set automatically on events, so you don't need to retrieve or change them.

The caller of this request must have `EVENTS_UPDATE` permission for the organizer of this event.

 * @summary Update event card systems
 */
export const putEventsCardSystems = (
  eventId: string,
  eventCardSystem: EventCardSystem[],
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/events/${eventId}/card-systems`, eventCardSystem, options);
};

export type PutEventsCardSystemsMutationResult = NonNullable<
  Awaited<ReturnType<typeof putEventsCardSystems>>
>;
export type PutEventsCardSystemsMutationBody = EventCardSystem[];
export type PutEventsCardSystemsMutationError = AxiosError<
  Error | UnauthorizedResponse | ForbiddenResponse
>;

export const usePutEventsCardSystems = <
  TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putEventsCardSystems>>,
    TError,
    { eventId: string; data: EventCardSystem[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putEventsCardSystems>>,
    { eventId: string; data: EventCardSystem[] }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return putEventsCardSystems(eventId, data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof putEventsCardSystems>>,
    TError,
    { eventId: string; data: EventCardSystem[] },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Get all (enabled and disabled) `EventCardSystem` objects of the given event.

The `EventCardSystem` object specifies that the event is available in
this specific card system and optionally what manual distribution keys are enabled.

Every `EventCardSystem` or `ManualDistributionKey` has an `enabled` property that can be altered using `PUT /events/{eventId}/card-systems`.
 
<!-- theme: warning -->

> **This endpoint is only needed for exceptional cases.** In most cases card systems and distribution keys are set automatically on events, so you don't need to retrieve or change them.

The caller of this request must have `EVENTS_READ` permission for the organizer of this event.

 * @summary Get event card systems
 */
export const getEventsCardSystems = (
  eventId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EventCardSystem[]>> => {
  return axios.get(`/events/${eventId}/card-systems`, options);
};

export const getGetEventsCardSystemsQueryKey = (eventId: string) => [
  `/events/${eventId}/card-systems`,
];

export type GetEventsCardSystemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventsCardSystems>>
>;
export type GetEventsCardSystemsQueryError = AxiosError<
  UnauthorizedResponse | ForbiddenResponse | Error
>;

export const useGetEventsCardSystems = <
  TData = Awaited<ReturnType<typeof getEventsCardSystems>>,
  TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>
>(
  eventId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEventsCardSystems>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetEventsCardSystemsQueryKey(eventId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventsCardSystems>>
  > = ({ signal }) =>
    getEventsCardSystems(eventId, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof getEventsCardSystems>>,
    TError,
    TData
  >({
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
