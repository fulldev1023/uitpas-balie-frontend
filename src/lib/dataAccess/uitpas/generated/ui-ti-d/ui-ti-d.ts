/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * UiTPAS API
 * With UiTPAS API 4.0 you can retrieve ticket prices and register ticket sales for passholders. You can also save UiTPAS points and exchange them for rewards for a passholder, and much more.
 * OpenAPI spec version: 4.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Error,
  ForbiddenResponse,
  GetUitidEmail200,
  UnauthorizedResponse
} from '.././model'



/**
 * Retrieves the email address status in UiTPAS and UiTiD for a given email address. This is step 3 in the process of registering an UiTPAS passholder in UiTiD.

The response contains a `state` property which can be one of the following values:

* `UITPAS_ALREADY_LINKED` : the user cannot use this email address to register another UiTPAS
* `UITID_UNREGISTERED` : the user can use this email address to register their UiTPAS but must register on UiTiD first
* `UITID_REGISTERED` : the user can use this email address to register their UiTPAS but must login on UiTiD first

After [UiTiD authentication](https://docs.publiq.be/docs/authentication/ZG9jOjExODE5NTM5-user-access-token) the client should proceed to step 4 of the process, [registering UiTiD for the passholder](/reference/uitpas.json/paths/~1passholders~1me~1uitid/put).

This caller of this method, identified with [client identification](https://docs.publiq.be/docs/authentication/ZG9jOjExODE5NDY5-client-identification), does not require any permissions but please note this endpoint is rate-limited on IP address to prevent abuse.
 * @summary Retrieve UiTiD email address status
 */
export const getUitidEmail = (
    email: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUitidEmail200>> => {
    
    return axios.get(
      `NEXT_PUBLIC_API_PATH/uitid/emails/${email}`,options
    );
  }


export const getGetUitidEmailQueryKey = (email: string,) => {
    
    return [`NEXT_PUBLIC_API_PATH/uitid/emails/${email}`] as const;
    }

    
export const getGetUitidEmailQueryOptions = <TData = Awaited<ReturnType<typeof getUitidEmail>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>>(email: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUitidEmail>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUitidEmailQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUitidEmail>>> = ({ signal }) => getUitidEmail(email, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUitidEmail>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUitidEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getUitidEmail>>>
export type GetUitidEmailQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>

/**
 * @summary Retrieve UiTiD email address status
 */
export const useGetUitidEmail = <TData = Awaited<ReturnType<typeof getUitidEmail>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>>(
 email: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUitidEmail>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUitidEmailQueryOptions(email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

