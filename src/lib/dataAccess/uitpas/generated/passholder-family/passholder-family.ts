/**
 * Generated by orval v6.12.0 üç∫
 * Do not edit manually.
 * UiTPAS API
 * With UiTPAS API 4.0 you can retrieve ticket prices and register ticket sales for passholders. You can also save UiTPAS points and exchange them for rewards for a passholder, and much more.
 * OpenAPI spec version: 4.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  FamilyMember,
  UnauthorizedResponse,
  ForbiddenResponse,
  Error,
  GetPassholdersPassholderIdFamilies200Item
} from '.././model'


/**
 * Retrieve family members of a given passholder.

The list of family members is specific to this passholder, the family relation is not mutual, 
the total number of family members and the number of adults in a family is limited. 

The passholder identified by `{passholderId}` is always part of this list and its boolean property `mainFamilyMember` will be `true`.

The caller of this method must have `PASSHOLDERS_FAMILY_MEMBERS` permission for the given passholder.
 * @summary Retrieve family members of the current passholder
 */
export const getPassholdersPassholderIdFamilyMembers = (
    passholderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FamilyMember[]>> => {
    return axios.get(
      `/passholders/${passholderId}/family-members`,options
    );
  }


export const getGetPassholdersPassholderIdFamilyMembersQueryKey = (passholderId: string,) => [`/passholders/${passholderId}/family-members`];

    
export type GetPassholdersPassholderIdFamilyMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getPassholdersPassholderIdFamilyMembers>>>
export type GetPassholdersPassholderIdFamilyMembersQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>

export const useGetPassholdersPassholderIdFamilyMembers = <TData = Awaited<ReturnType<typeof getPassholdersPassholderIdFamilyMembers>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>>(
 passholderId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPassholdersPassholderIdFamilyMembers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPassholdersPassholderIdFamilyMembersQueryKey(passholderId);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPassholdersPassholderIdFamilyMembers>>> = ({ signal }) => getPassholdersPassholderIdFamilyMembers(passholderId, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof getPassholdersPassholderIdFamilyMembers>>, TError, TData>({ queryKey, queryFn, enabled: !!(passholderId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * Add another passholder as a family member of the given passholder.

Specify the `uitpasNumber` and optionally an `icon` for the new family member.

The caller of this method must have `PASSHOLDERS_FAMILY_MEMBERS` permission for the given passholder.

If a user access token of a passholder is used (e.g. in an end-user application), an extra `x-registration-header` header is required containing the registration token of the new family member. Use [GET /passholders/me/uitid/registration-token](/reference/uitpas.json/paths/~1passholders~1me~1uitid~1registration-token/get) to retrieve a registration token.

If an admin user token or client access token with the appropriate permissions is used, the `x-registration-token` header can be ommitted.
 * @summary Add family members to the current passholder's family
 */
export const postPassholdersPassholderIdFamilyMembers = (
    passholderId: string,
    familyMember: FamilyMember, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/passholders/${passholderId}/family-members`,
      familyMember,options
    );
  }



    export type PostPassholdersPassholderIdFamilyMembersMutationResult = NonNullable<Awaited<ReturnType<typeof postPassholdersPassholderIdFamilyMembers>>>
    export type PostPassholdersPassholderIdFamilyMembersMutationBody = FamilyMember
    export type PostPassholdersPassholderIdFamilyMembersMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    export const usePostPassholdersPassholderIdFamilyMembers = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPassholdersPassholderIdFamilyMembers>>, TError,{passholderId: string;data: FamilyMember}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPassholdersPassholderIdFamilyMembers>>, {passholderId: string;data: FamilyMember}> = (props) => {
          const {passholderId,data} = props ?? {};

          return  postPassholdersPassholderIdFamilyMembers(passholderId,data,axiosOptions)
        }

        

      return useMutation<Awaited<ReturnType<typeof postPassholdersPassholderIdFamilyMembers>>, TError, {passholderId: string;data: FamilyMember}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * Update information of a family member of the given passholder.

The caller of this method must have `PASSHOLDERS_FAMILY_MEMBERS` permission for the given passholder.
 * @summary Update a family member
 */
export const putPassholdersPassholderIdFamilyMembersFamilyMemberId = (
    passholderId: string,
    familyMemberId: string,
    familyMember: FamilyMember, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/passholders/${passholderId}/family-members/${familyMemberId}`,
      familyMember,options
    );
  }



    export type PutPassholdersPassholderIdFamilyMembersFamilyMemberIdMutationResult = NonNullable<Awaited<ReturnType<typeof putPassholdersPassholderIdFamilyMembersFamilyMemberId>>>
    export type PutPassholdersPassholderIdFamilyMembersFamilyMemberIdMutationBody = FamilyMember
    export type PutPassholdersPassholderIdFamilyMembersFamilyMemberIdMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    export const usePutPassholdersPassholderIdFamilyMembersFamilyMemberId = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPassholdersPassholderIdFamilyMembersFamilyMemberId>>, TError,{passholderId: string;familyMemberId: string;data: FamilyMember}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putPassholdersPassholderIdFamilyMembersFamilyMemberId>>, {passholderId: string;familyMemberId: string;data: FamilyMember}> = (props) => {
          const {passholderId,familyMemberId,data} = props ?? {};

          return  putPassholdersPassholderIdFamilyMembersFamilyMemberId(passholderId,familyMemberId,data,axiosOptions)
        }

        

      return useMutation<Awaited<ReturnType<typeof putPassholdersPassholderIdFamilyMembersFamilyMemberId>>, TError, {passholderId: string;familyMemberId: string;data: FamilyMember}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * Delete a family member of a given passholder.

The given passholder is always a member of their family (boolean `mainFamilyMember` is `true`) and cannot be deleted.

The caller of this method must have `PASSHOLDERS_FAMILY_MEMBERS` permission for the given passholder.
 * @summary Delete a family member
 */
export const deletePassholdersPassholderIdFamilyMembersFamilyMemberId = (
    passholderId: string,
    familyMemberId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/passholders/${passholderId}/family-members/${familyMemberId}`,options
    );
  }



    export type DeletePassholdersPassholderIdFamilyMembersFamilyMemberIdMutationResult = NonNullable<Awaited<ReturnType<typeof deletePassholdersPassholderIdFamilyMembersFamilyMemberId>>>
    
    export type DeletePassholdersPassholderIdFamilyMembersFamilyMemberIdMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>

    export const useDeletePassholdersPassholderIdFamilyMembersFamilyMemberId = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePassholdersPassholderIdFamilyMembersFamilyMemberId>>, TError,{passholderId: string;familyMemberId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePassholdersPassholderIdFamilyMembersFamilyMemberId>>, {passholderId: string;familyMemberId: string}> = (props) => {
          const {passholderId,familyMemberId} = props ?? {};

          return  deletePassholdersPassholderIdFamilyMembersFamilyMemberId(passholderId,familyMemberId,axiosOptions)
        }

        

      return useMutation<Awaited<ReturnType<typeof deletePassholdersPassholderIdFamilyMembersFamilyMemberId>>, TError, {passholderId: string;familyMemberId: string}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * Retrieve the other families to which the given passholder was added. This explicitly excludes the passholder's own family.

The caller of this method must have `PASSHOLDERS_FAMILY_MEMBERS` permission for the given passholder.
 * @summary Retrieve families of the current passholder
 */
export const getPassholdersPassholderIdFamilies = (
    passholderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetPassholdersPassholderIdFamilies200Item[]>> => {
    return axios.get(
      `/passholders/${passholderId}/families`,options
    );
  }


export const getGetPassholdersPassholderIdFamiliesQueryKey = (passholderId: string,) => [`/passholders/${passholderId}/families`];

    
export type GetPassholdersPassholderIdFamiliesQueryResult = NonNullable<Awaited<ReturnType<typeof getPassholdersPassholderIdFamilies>>>
export type GetPassholdersPassholderIdFamiliesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>

export const useGetPassholdersPassholderIdFamilies = <TData = Awaited<ReturnType<typeof getPassholdersPassholderIdFamilies>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>>(
 passholderId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPassholdersPassholderIdFamilies>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPassholdersPassholderIdFamiliesQueryKey(passholderId);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPassholdersPassholderIdFamilies>>> = ({ signal }) => getPassholdersPassholderIdFamilies(passholderId, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof getPassholdersPassholderIdFamilies>>, TError, TData>({ queryKey, queryFn, enabled: !!(passholderId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

