/**
 * Generated by orval v6.12.0 üç∫
 * Do not edit manually.
 * UiTPAS API
 * With UiTPAS API 4.0 you can retrieve ticket prices and register ticket sales for passholders. You can also save UiTPAS points and exchange them for rewards for a passholder, and much more.
 * OpenAPI spec version: 4.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  OrganizersPaginatedResponse,
  Error,
  UnauthorizedResponse,
  ForbiddenResponse,
  GetOrganizersParams
} from '.././model'


/**
 * Retrieve organizers based on search parameters.

The caller of this request must have `ORGANIZERS_SEARCH` permission for the given organizer.
 * @summary Get organizers
 */
export const getOrganizers = (
    params?: GetOrganizersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OrganizersPaginatedResponse>> => {
    return axios.get(
      `/organizers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetOrganizersQueryKey = (params?: GetOrganizersParams,) => [`/organizers`, ...(params ? [params]: [])];

    
export type GetOrganizersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganizers>>>
export type GetOrganizersQueryError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

export const useGetOrganizers = <TData = Awaited<ReturnType<typeof getOrganizers>>, TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>>(
 params?: GetOrganizersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOrganizers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrganizersQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizers>>> = ({ signal }) => getOrganizers(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof getOrganizers>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

