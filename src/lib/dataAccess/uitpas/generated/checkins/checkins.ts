/**
 * Generated by orval v6.12.0 🍺
 * Do not edit manually.
 * UiTPAS API
 * With UiTPAS API 4.0 you can retrieve ticket prices and register ticket sales for passholders. You can also save UiTPAS points and exchange them for rewards for a passholder, and much more.
 * OpenAPI spec version: 4.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  Checkin,
  Error,
  UnauthorizedResponse,
  ForbiddenResponse
} from '.././model'


/**
 * Check in a passholder at a given event.

You will need:
- The `uitpasNumber` of the passholder
- The `eventId` of the UiTdatabank event.

> Checking in a passholder is only possible during the opening hours of the event and a certain period before and after. A client will receive an error of type `https://api.publiq.be/probs/uitpas/checkin-not-allowed` when a check-in is not allowed. The `endUserMessage` field of that error response will also contain a user-readable error message.

The caller of this request must have `CHECKINS_WRITE` permission for the organizer of the given event.

 * @summary Check in passholder
 */
export const postCheckins = (
    checkin: Checkin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Checkin>> => {
    return axios.post(
      `/checkins`,
      checkin,options
    );
  }



    export type PostCheckinsMutationResult = NonNullable<Awaited<ReturnType<typeof postCheckins>>>
    export type PostCheckinsMutationBody = Checkin
    export type PostCheckinsMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    export const usePostCheckins = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCheckins>>, TError,{data: Checkin}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCheckins>>, {data: Checkin}> = (props) => {
          const {data} = props ?? {};

          return  postCheckins(data,axiosOptions)
        }

        

      return useMutation<Awaited<ReturnType<typeof postCheckins>>, TError, {data: Checkin}, TContext>(mutationFn, mutationOptions);
    }
    