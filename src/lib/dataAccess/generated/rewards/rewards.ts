/**
 * Generated by orval v6.12.0 üç∫
 * Do not edit manually.
 * UiTPAS API
 * With UiTPAS API 4.0 you can retrieve ticket prices and register ticket sales for passholders. You can also save UiTPAS points and exchange them for rewards for a passholder, and much more.
 * OpenAPI spec version: 4.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  RewardsPaginatedResponse,
  Error,
  UnauthorizedResponse,
  ForbiddenResponse,
  GetRewardsParams,
  Reward,
  GetRewardsIdRedeemStatus200,
  GetRewardsIdRedeemStatusParams,
  RedeemedReward,
  PostRewardsRedeemedBody,
  RedeemedRewardsPaginatedResponse,
  GetRewardsRedeemedParams
} from '.././model'


/**
 * Search rewards.

The caller of this request does not need special permissions permission except `REWARDS_PASSHOLDERS_READ` to use the `isRedeemableBy` query parameter.

This endpoint allows authentication with [client identification](/docs/authentication/ZG9jOjExODE5NDY5-client-identification), [client access tokens](/docs/authentication/ZG9jOjExODE5NDY4-client-access-token), and [user access tokens](/docs/authentication/ZG9jOjExODE5NTM5-user-access-token).
 * @summary Search rewards
 */
export const getRewards = (
    params?: GetRewardsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RewardsPaginatedResponse>> => {
    return axios.get(
      `/rewards`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetRewardsQueryKey = (params?: GetRewardsParams,) => [`/rewards`, ...(params ? [params]: [])];

    
export type GetRewardsQueryResult = NonNullable<Awaited<ReturnType<typeof getRewards>>>
export type GetRewardsQueryError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

export const useGetRewards = <TData = Awaited<ReturnType<typeof getRewards>>, TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>>(
 params?: GetRewardsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRewards>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRewardsQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRewards>>> = ({ signal }) => getRewards(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof getRewards>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * Create a new reward.

The caller of this request must have `REWARDS_WRITE` permission for the given organizer.
 * @summary Create new reward
 */
export const postRewards = (
    reward: Reward, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Reward>> => {
    return axios.post(
      `/rewards`,
      reward,options
    );
  }



    export type PostRewardsMutationResult = NonNullable<Awaited<ReturnType<typeof postRewards>>>
    export type PostRewardsMutationBody = Reward
    export type PostRewardsMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    export const usePostRewards = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRewards>>, TError,{data: Reward}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRewards>>, {data: Reward}> = (props) => {
          const {data} = props ?? {};

          return  postRewards(data,axiosOptions)
        }

        

      return useMutation<Awaited<ReturnType<typeof postRewards>>, TError, {data: Reward}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * Retrieve reward by ID.

The caller of this request must have `REWARDS_READ` permission for the given organizer.
 * @summary Retrieve reward
 */
export const getRewardsId = (
    rewardId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Reward>> => {
    return axios.get(
      `/rewards/${rewardId}`,options
    );
  }


export const getGetRewardsIdQueryKey = (rewardId: string,) => [`/rewards/${rewardId}`];

    
export type GetRewardsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRewardsId>>>
export type GetRewardsIdQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>

export const useGetRewardsId = <TData = Awaited<ReturnType<typeof getRewardsId>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>>(
 rewardId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRewardsId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRewardsIdQueryKey(rewardId);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRewardsId>>> = ({ signal }) => getRewardsId(rewardId, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof getRewardsId>>, TError, TData>({ queryKey, queryFn, enabled: !!(rewardId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * Update reward.
To update a reward correctly, as a client you will typically `GET` the reward first,  make the required changes in the reward json and use this `PUT` request to persist those changes in UiTPAS.

Do note that the following fields are **not editable** after this reward is redeemed by (for POINTS rewards) or granted to (for WELCOME rewards) a passholder:
* redeemPeriod.begin
* grantingPeriod.begin
* points

Attempts to edit such rewards will result in an HTTP 400 error with type `https://api.publiq.be/probs/uitpas/reward-not-editable`

The caller of this request must have `REWARDS_WRITE` permission for the given organizer.
 * @summary Update reward
 */
export const putRewardsId = (
    rewardId: string,
    reward: Reward, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Reward>> => {
    return axios.put(
      `/rewards/${rewardId}`,
      reward,options
    );
  }



    export type PutRewardsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putRewardsId>>>
    export type PutRewardsIdMutationBody = Reward
    export type PutRewardsIdMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    export const usePutRewardsId = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRewardsId>>, TError,{rewardId: string;data: Reward}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putRewardsId>>, {rewardId: string;data: Reward}> = (props) => {
          const {rewardId,data} = props ?? {};

          return  putRewardsId(rewardId,data,axiosOptions)
        }

        

      return useMutation<Awaited<ReturnType<typeof putRewardsId>>, TError, {rewardId: string;data: Reward}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * Check the reward redeem status for a passholder.


The caller of this request must have `REWARDS_REDEEM` permission for the given organizer.
 * @summary Check redeem status of a reward for a passholder
 */
export const getRewardsIdRedeemStatus = (
    rewardId: string,
    params: GetRewardsIdRedeemStatusParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetRewardsIdRedeemStatus200>> => {
    return axios.get(
      `/rewards/${rewardId}/redeem-status`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetRewardsIdRedeemStatusQueryKey = (rewardId: string,
    params: GetRewardsIdRedeemStatusParams,) => [`/rewards/${rewardId}/redeem-status`, ...(params ? [params]: [])];

    
export type GetRewardsIdRedeemStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getRewardsIdRedeemStatus>>>
export type GetRewardsIdRedeemStatusQueryError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

export const useGetRewardsIdRedeemStatus = <TData = Awaited<ReturnType<typeof getRewardsIdRedeemStatus>>, TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>>(
 rewardId: string,
    params: GetRewardsIdRedeemStatusParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRewardsIdRedeemStatus>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRewardsIdRedeemStatusQueryKey(rewardId,params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRewardsIdRedeemStatus>>> = ({ signal }) => getRewardsIdRedeemStatus(rewardId,params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof getRewardsIdRedeemStatus>>, TError, TData>({ queryKey, queryFn, enabled: !!(rewardId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * Redeem reward.

The caller of this request must have `REWARDS_REDEEM` permission for the given organizer.
 * @summary Redeem reward
 */
export const postRewardsRedeemed = (
    postRewardsRedeemedBody: PostRewardsRedeemedBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RedeemedReward>> => {
    return axios.post(
      `/rewards/redeemed`,
      postRewardsRedeemedBody,options
    );
  }



    export type PostRewardsRedeemedMutationResult = NonNullable<Awaited<ReturnType<typeof postRewardsRedeemed>>>
    export type PostRewardsRedeemedMutationBody = PostRewardsRedeemedBody
    export type PostRewardsRedeemedMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    export const usePostRewardsRedeemed = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRewardsRedeemed>>, TError,{data: PostRewardsRedeemedBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRewardsRedeemed>>, {data: PostRewardsRedeemedBody}> = (props) => {
          const {data} = props ?? {};

          return  postRewardsRedeemed(data,axiosOptions)
        }

        

      return useMutation<Awaited<ReturnType<typeof postRewardsRedeemed>>, TError, {data: PostRewardsRedeemedBody}, TContext>(mutationFn, mutationOptions);
    }
    /**
 * Retrieve redeemed rewards for a passholder.

The caller of this request must have `REWARDS_READ` permission.
 * @summary Retrieve redeemed rewards
 */
export const getRewardsRedeemed = (
    params: GetRewardsRedeemedParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RedeemedRewardsPaginatedResponse>> => {
    return axios.get(
      `/rewards/redeemed`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetRewardsRedeemedQueryKey = (params: GetRewardsRedeemedParams,) => [`/rewards/redeemed`, ...(params ? [params]: [])];

    
export type GetRewardsRedeemedQueryResult = NonNullable<Awaited<ReturnType<typeof getRewardsRedeemed>>>
export type GetRewardsRedeemedQueryError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

export const useGetRewardsRedeemed = <TData = Awaited<ReturnType<typeof getRewardsRedeemed>>, TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>>(
 params: GetRewardsRedeemedParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRewardsRedeemed>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRewardsRedeemedQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRewardsRedeemed>>> = ({ signal }) => getRewardsRedeemed(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof getRewardsRedeemed>>, TError, TData>({ queryKey, queryFn, ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

